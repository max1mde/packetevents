plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply(false)
}

wrapper {
    gradleVersion = "8.5"
    distributionType = Wrapper.DistributionType.ALL
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'

    group = 'com.github.max1mde'
    version = '2.2.1'

    project.ext.nettyVersion = '4.1.72.Final'
    project.ext.adventureVersion = '4.16.0'
    project.ext.adventureDependencies = ["net.kyori:adventure-api:${adventureVersion}",
                                         "net.kyori:adventure-text-serializer-gson:${adventureVersion}",
                                         "net.kyori:adventure-text-serializer-legacy:${adventureVersion}",
                                         "net.kyori:adventure-nbt:${adventureVersion}"]

    java.sourceCompatibility = JavaVersion.VERSION_17
    java.targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        compileOnly 'org.jetbrains:annotations:23.0.0'
    }

    tasks {
        shadowJar {
            archiveFileName.set("packetevents-${project.name}-${project.version}.jar")
        }

        build {
            dependsOn(shadowJar)
        }

        task sourceJar(type: Jar) {
            from sourceSets.main.allJava
        }

        withType(JavaCompile) {
            options.encoding = 'UTF-8'
            options.release.set(8)
        }

        jar.configure {
            archiveClassifier = 'default'
        }

        shadowJar.configure {
            archiveClassifier = null
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = "com.github.max1mde.packetevents"
                artifactId = project.name
                version = project.version
                from components.java
            }
        }
    }
}

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}